// Generated by CoffeeScript 1.10.0
(function() {
  var Fiber, Sync, await, defer, fiber,
    slice = [].slice;

  Sync = require('synchronize');

  Fiber = Sync.Fiber;

  fiber = Sync.fiber;

  await = Sync.await;

  defer = Sync.defer;

  module.exports = Sync;

  Sync.deferAll = function() {
    var deferFunc;
    deferFunc = defer();
    return function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return deferFunc(null, args);
    };
  };

  Sync.returnAllFn = function(fn) {
    var syncFunc;
    if (fn._synchronized) {
      return fn;
    }
    syncFunc = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (Fiber.current && typeof args.slice(-1)[0] !== 'function') {
        fn.call.apply(fn, [this].concat(slice.call(args), [Sync.deferAll()]));
        return Sync.await();
      } else {
        return fn.apply(this, args);
      }
    };
    syncFunc._synchronized = true;
    return syncFunc;
  };

  Sync.returnAll = function() {
    var f, fns, i, len, obj, results;
    obj = arguments[0], fns = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    results = [];
    for (i = 0, len = fns.length; i < len; i++) {
      f = fns[i];
      results.push(obj[f] = Sync.returnAllFn(obj[f]));
    }
    return results;
  };

}).call(this);
