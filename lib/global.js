// Generated by CoffeeScript 1.10.0
(function() {
  var Nvim, Reflect, await, defer, fiber, lib, properties, sync,
    slice = [].slice;

  Reflect = require('harmony-reflect');

  sync = '../dev/sync';

  fiber = sync.fiber;

  await = sync.await;

  defer = sync.defer;

  Nvim = null;

  module.exports = function(nvim) {
    var k, v;
    Nvim = nvim;
    for (k in properties) {
      v = properties[k];
      Object.defineProperty(lib, k, v);
    }
    return lib;
  };

  properties = {
    windows: {
      get: function() {
        return Nvim.getWindows();
      }
    },
    buffers: {
      get: function() {
        return Nvim.getBuffers();
      }
    },
    buffer: {
      get: function() {
        return Nvim.getCurrentBuffer();
      },
      set: function(b) {
        return Nvim.setCurrentBuffer(b);
      }
    },
    window: {
      get: function() {
        return Nvim.getCurrentWindow();
      },
      set: function(b) {
        return Nvim.setCurrentWindow(b);
      }
    },
    tabpage: {
      get: function() {
        return Nvim.getCurrentTabpage();
      },
      set: function(b) {
        return Nvim.setCurrentTabpage(b);
      }
    }
  };

  lib = {};

  lib.echo = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return Nvim.command("echo '" + (args.join(' ')) + "'");
  };

  lib.echohl = function() {
    var args, hl, msg;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    hl = args.length === 1 ? 'TextInfo' : args[0];
    msg = args.length === 1 ? args[0] : args.slice(1).join(' ');
    return Nvim.command("EchoHL " + hl + " " + msg);
  };

  lib["eval"] = function(text) {
    return Nvim["eval"](text);
  };

  lib.bufnr = function(expr) {
    return Nvim["eval"]("bufnr('" + expr + "')");
  };

  lib.bufname = function(nr) {
    return Nvim["eval"]("bufname(" + nr + ")").toString();
  };

  lib.set = function(option, value) {
    if (option == null) {
      return;
    }
    if (option.slice(-1) === '?') {
      return await(Nvim.getOption(option.slice(0, -1), defer()));
    }
    if (value != null) {
      return Nvim.setOption(option, value);
    }
  };

  lib.normal = function(seq, nore) {
    if (nore == null) {
      nore = true;
    }
    return Nvim.command("normal" + (typeof nore === "function" ? nore({
      '!': ''
    }) : void 0) + " " + seq);
  };

  lib.execute = function(seq) {
    return Nvim.command(seq);
  };

  lib.insert = function(lnum, lines) {
    var buf;
    buf = Nvim.getCurrentBuffer();
    return buf.insert(lnum, lines);
  };

}).call(this);
