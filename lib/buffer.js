// Generated by CoffeeScript 1.10.0
(function() {
  var BufferProxy, Reflect, buffer;

  Reflect = require('harmony-reflect');

  module.exports = buffer = {
    BufferProxy: BufferProxy,
    init: function(type) {
      var definition, key, ref;
      ref = this.properties;
      for (key in ref) {
        definition = ref[key];
        Object.defineProperty(type, key, definition);
      }
      return type.getProxy = type.proxy = function() {
        return new BufferProxy(this);
      };
    }
  };

  buffer.properties = {
    length: {
      get: function() {
        return this.lineCount();
      }
    },
    number: {
      get: function() {
        return this.getNumber();
      }
    },
    name: {
      get: function() {
        return this.getName();
      },
      set: function(v) {
        return this.setName(v);
      }
    },
    valid: {
      get: function() {
        return this.isValid();
      }
    }
  };

  buffer.proxy = {
    construct: function(target, args) {
      var t;
      t = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(target, args, function(){});
      return new BufferProxy(t);
    }
  };

  BufferProxy = (function() {
    function BufferProxy(target) {
      return new Proxy(target, this);
    }

    BufferProxy.prototype.get = function(target, name, receiver) {
      var optName, varName;
      switch (name.charAt(0)) {
        case ':':
          varName = name.substring(1);
          return target.getVar(varName);
        case '&':
          optName = name.substring(1);
          return target.getOption(optName);
      }
      if (/^\d+$/.test(name)) {
        return target.getLine(~~name);
      }
      if (name in target) {
        return target[name];
      }
      return void 0;
    };

    BufferProxy.prototype.set = function(target, name, val, receiver) {
      var optName, varName;
      if (name.charAt(0) === ':') {
        varName = name.substring(1);
        target.setVar(varName, val);
      } else if (name.charAt(0) === '&') {
        optName = name.substring(1);
        target.setOption(optName, val);
      } else if (/^\d+$/.test(name)) {
        target.setLine(~~name, val);
      } else {
        target[name] = val;
      }
      return true;
    };

    BufferProxy.prototype.deleteProperty = function(target, name) {
      var e, error;
      if (/^\d+$/.test(name)) {
        try {
          target.delLine(~~name);
        } catch (error) {
          e = error;
          return false;
        }
        return true;
      }
      return Reflect.deleteProperty(target, name);
    };

    return BufferProxy;

  })();

}).call(this);
