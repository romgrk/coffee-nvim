// Generated by CoffeeScript 1.10.0
(function() {
  var Path, Reflect, _, await, defer, fiber, hh, sync,
    slice = [].slice;

  _ = require('lodash');

  Path = require('path');

  Reflect = require('harmony-reflect');

  sync = require('synchronize');

  fiber = sync.fiber;

  await = sync.await;

  defer = sync.defer;

  module.exports = hh = {};

  global.RES = hh.res = function(object) {
    if (Buffer.isBuffer(object)) {
      return object.toString();
    }
    return object;
  };

  hh.superClass = function(type) {
    return type.__super__ = _.extend({}, type.prototype);
  };

  hh.defineProxies = function(obj, proxies) {
    var desc, name, results;
    results = [];
    for (name in proxies) {
      desc = proxies[name];
      results.push(obj[name] = new Proxy({}, desc));
    }
    return results;
  };

  hh.getOptionDesc = function() {
    var args, context, getFn, optName, ref, setFn;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    optName = args[0];
    context = (ref = args[1]) != null ? ref : null;
    getFn = function() {
      return this.getOption(optName);
    };
    setFn = function(v) {
      return this.setOption(optName, v);
    };
    if (context != null) {
      getFn = getFn.bind(context);
      setFn = setFn.bind(context);
    }
    return {
      get: getFn,
      set: setFn
    };
  };

  hh.addOptionDesc = function(obj, propName, optName) {
    var getFn, setFn;
    getFn = function() {
      return this.getOption(optName);
    };
    setFn = function(v) {
      return this.setOption(optName, v);
    };
    return obj.properties[propName] = {
      get: getFn,
      set: setFn
    };
  };

  hh.getVarDesc = function(varName) {
    var getFn, setFn;
    getFn = function() {
      return this.getVar(varName);
    };
    setFn = function(v) {
      return this.setVar(varName, v);
    };
    return {
      get: getFn,
      set: setFn
    };
  };

  hh.addVarDesc = function(obj, propName, varName) {
    var getFn, setFn;
    getFn = function() {
      return this.getVar(varName);
    };
    setFn = function(v) {
      return this.setVar(varName, v);
    };
    return obj.properties[propName] = {
      get: getFn,
      set: setFn
    };
  };

}).call(this);
