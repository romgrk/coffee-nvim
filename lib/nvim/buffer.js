// Generated by CoffeeScript 1.10.0
(function() {
  var BufferObject, BufferProxy, LineProxy, Reflect, _, hh;

  _ = require('lodash');

  Reflect = require('harmony-reflect');

  hh = require('../helpers');

  LineProxy = (function() {
    LineProxy.prototype.buffer = null;

    function LineProxy(buffer, target) {
      this.buffer = buffer;
      return new Proxy(target, this);
    }

    LineProxy.prototype.get = function(target, name, receiver) {
      if (name === 'length') {
        return this.buffer.lineCount();
      }
      if (/^\d+$/.test(name)) {
        return this.buffer.getLine(~~name).toString();
      }
      if (name in target) {
        return target[name];
      }
      return void 0;
    };

    LineProxy.prototype.set = function(target, name, val, receiver) {
      if (/^\d+$/.test(name)) {
        this.buffer.setLine(~~name, val);
      }
      return true;
    };

    LineProxy.prototype.deleteProperty = function(target, name) {
      var e, error;
      if (/^\d+$/.test(name)) {
        try {
          this.buffer.delLine(~~name);
        } catch (error) {
          e = error;
          return false;
        }
        return true;
      }
      return Reflect.deleteProperty(target, name);
    };

    return LineProxy;

  })();

  hh.superClass(Nvim.Buffer);

  Nvim.Buffer.prototype.getProxy = function() {
    return this._proxy != null ? this._proxy : this._proxy = new BufferProxy(this);
  };

  Nvim.Buffer.prototype["delete"] = function() {
    return Nvim.command('bdelete ' + this.number);
  };

  Nvim.Buffer.prototype.wipeout = function() {
    return Nvim.command('bwipeout ' + this.number);
  };

  BufferObject = {};

  BufferObject.properties = {
    length: {
      get: function() {
        return this.lineCount();
      }
    },
    number: {
      get: function() {
        return this._number != null ? this._number : this._number = this.getNumber();
      }
    },
    name: {
      get: function() {
        return this.getName();
      },
      set: function(v) {
        return this.setName(v);
      }
    },
    valid: {
      get: function() {
        return this.isValid();
      }
    },
    listed: {
      get: function() {
        return this.getOption('buflisted');
      },
      set: function(v) {
        return this.setOption('buflisted', v);
      }
    },
    type: {
      get: function() {
        return this.getOption('buftype');
      },
      set: function(v) {
        return this.setOption('buftype', v);
      }
    }
  };

  hh.addOptionDesc(BufferObject, 'ft', 'filetype');

  module.exports = BufferProxy = (function() {
    BufferProxy.LineProxy = LineProxy;

    BufferProxy.prototype.buffer = null;

    function BufferProxy(buffer) {
      this.buffer = buffer;
      Object.defineProperties(this.buffer, BufferObject.properties);
      this.buffer.lines = new LineProxy(this.buffer, {});
      return new Proxy(this.buffer, this);
    }

    BufferProxy.prototype.get = function(target, name, receiver) {
      var optName, varName;
      switch (name.charAt(0)) {
        case ':':
          varName = name.substring(1);
          return target.getVar(varName);
        case '&':
          optName = name.substring(1);
          return target.getOption(optName);
      }
      if (/^\d+$/.test(name)) {
        return target.getLine(~~name).toString();
      }
      if (name in target) {
        return target[name];
      }
      return void 0;
    };

    BufferProxy.prototype.set = function(target, name, val, receiver) {
      var optName, varName;
      if (name.charAt(0) === ':') {
        varName = name.substring(1);
        target.setVar(varName, val);
      } else if (name.charAt(0) === '&') {
        optName = name.substring(1);
        target.setOption(optName, val);
      } else if (/^\d+$/.test(name)) {
        target.setLine(~~name, val);
      } else {
        target[name] = val;
      }
      return true;
    };

    BufferProxy.prototype.deleteProperty = function(target, name) {
      var e, error;
      if (/^\d+$/.test(name)) {
        try {
          target.delLine(~~name);
        } catch (error) {
          e = error;
          return false;
        }
        return true;
      }
      return Reflect.deleteProperty(target, name);
    };

    return BufferProxy;

  })();

}).call(this);
