// Generated by CoffeeScript 1.10.0
(function() {
  var ATTRIBUTES, Functions, HL_ATTR, HL_BG, HL_FG, HL_ID, Highlight, Nvim, Reflect, SYN_ID, _, call, hh, hlGet, synIDattr, synIDtrans,
    slice = [].slice;

  _ = require('lodash');

  hh = require('../helpers');

  Reflect = require('harmony-reflect');

  Nvim = global.Nvim;

  Functions = require('./functions');

  call = Functions.call;

  synIDtrans = function(id) {
    var tId;
    tId = call.synIDtrans(id);
    if (tId === 0) {
      return void 0;
    } else {
      return tId;
    }
  };

  synIDattr = function() {
    var args, attr;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    attr = hh.res(call.synIDattr.apply(call, args));
    if (attr === '' || (attr == null)) {
      return void 0;
    }
    return attr;
  };

  hlGet = function() {
    var args, id;
    id = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    return synIDattr.apply(null, [synIDtrans(id)].concat(slice.call(args)));
  };

  ATTRIBUTES = ['bold', 'italic', 'reverse', 'standout', 'underline', 'undercurl'];

  SYN_ID = function(name) {
    var id;
    if (typeof name === 'number') {
      return name;
    }
    if ((id = call.hlID(name)) === 0) {
      return void 0;
    }
    return id;
  };

  HL_ID = function(name) {
    var id;
    if (typeof name === 'number') {
      return name;
    }
    if ((id = call.hlID(name)) === 0) {
      return void 0;
    }
    return synIDtrans(id);
  };

  HL_FG = function(id) {
    return hlGet(id, 'fg');
  };

  HL_BG = function(id) {
    return hlGet(id, 'bg');
  };

  HL_ATTR = function(id) {
    var attr, i, len;
    for (i = 0, len = ATTRIBUTES.length; i < len; i++) {
      attr = ATTRIBUTES[i];
      if (hlGet(id, attr) != null) {
        return attr;
      }
    }
    return void 0;
  };

  Highlight = (function() {
    function Highlight() {}

    Highlight.ID = function(name) {
      return HL_ID(name);
    };

    Highlight.fg = function(id) {
      id = HL_ID(id);
      return HL_FG(id);
    };

    Highlight.bg = function(id) {
      id = HL_ID(id);
      return HL_BG(id);
    };

    Highlight.attr = function(id) {
      id = HL_ID(id);
      return HL_ATTR(id);
    };

    Highlight.find = function(name) {
      var group, id;
      id = HL_ID(name);
      if (id == null) {
        return void 0;
      }
      group = new Highlight.Group(name);
      group.ID = id;
      group.fg = HL_FG(id);
      group.bg = HL_BG(id);
      group.attr = HL_ATTR(id);
      return group;
    };

    Highlight.create = function() {
      var group, name, params;
      name = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return group = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Highlight.Group, [name].concat(slice.call(params)), function(){});
    };

    return Highlight;

  })();

  Highlight.Group = (function() {
    Group.prototype.ID = null;

    Group.prototype.name = null;

    function Group() {
      var name1, params, ref, ref1, ref2;
      name1 = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      this.name = name1;
      if (params.length === 1 && _.isObject(params[0])) {
        params = params[0];
        this.fg = (ref = params.fg) != null ? ref : null;
        this.bg = (ref1 = params.bg) != null ? ref1 : null;
        this.attr = (ref2 = params.attr) != null ? ref2 : null;
      } else {
        if (params[0] == null) {
          params[0] = null;
        }
        if (params[1] == null) {
          params[1] = null;
        }
        if (params[2] == null) {
          params[2] = null;
        }
        this.fg = params[0], this.bg = params[1], this.attr = params[2];
      }
    }

    return Group;

  })();

  module.exports = {
    Highlight: Highlight
  };

}).call(this);
