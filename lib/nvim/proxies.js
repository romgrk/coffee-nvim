// Generated by CoffeeScript 1.10.0
(function() {
  var CursorProxy, OptionProxy, Reflect, VarProxy, VimProxy, hh;

  Reflect = require('harmony-reflect');

  hh = require('../helpers');

  VimProxy = (function() {
    VimProxy.prototype.get = function(target, name, receiver) {
      var error, error1;
      if (name in target) {
        return target[name];
      }
      try {
        return hh.res(Nvim.getVvar(name));
      } catch (error1) {
        error = error1;
        return void 0;
      }
    };

    VimProxy.prototype.set = function(target, name, val, receiver) {
      if (name in target) {
        target[name] = val;
        return true;
      }
      return false;
    };

    function VimProxy() {
      var vimObject;
      vimObject = {
        "var": new VarProxy,
        option: new OptionProxy
      };
      Object.defineProperties(vimObject, this.properties);
      return new Proxy(vimObject, this);
    }

    VimProxy.prototype.properties = {
      paths: {
        get: Nvim.listRuntimePaths()
      }
    };

    return VimProxy;

  })();

  VarProxy = (function() {
    function VarProxy(target) {
      if (target == null) {
        target = {};
      }
      return new Proxy(target, this);
    }

    VarProxy.prototype.get = function(target, name) {
      return Nvim.getVar(name);
    };

    VarProxy.prototype.set = function(target, name, val) {
      return Nvim.setVar(name, val);
    };

    VarProxy.prototype.deleteProperty = function(target, name) {
      var e, error1;
      try {
        Nvim.setVar(name, null);
      } catch (error1) {
        e = error1;
        return false;
      }
      return true;
    };

    return VarProxy;

  })();

  OptionProxy = (function() {
    function OptionProxy(target) {
      if (target == null) {
        target = {};
      }
      return new Proxy(target, this);
    }

    OptionProxy.prototype.get = function(target, name) {
      return Nvim.getOption(name);
    };

    OptionProxy.prototype.set = function(target, name, val) {
      return Nvim.setOption(name, val);
    };

    OptionProxy.prototype.deleteProperty = function(target, name) {
      var e, error1;
      try {
        Nvim.setOption(name, '');
      } catch (error1) {
        e = error1;
        return false;
      }
      return true;
    };

    return OptionProxy;

  })();

  CursorProxy = (function() {
    CursorProxy.prototype.window = null;

    function CursorProxy(window, cursor) {
      this.window = window;
      return new Proxy(cursor, this);
    }

    CursorProxy.prototype.get = function(target, name, receiver) {
      if (name === 'line') {
        return target[0];
      }
      if (name === 'row') {
        return target[1];
      }
      if (name in target) {
        return target[name];
      }
      return void 0;
    };

    CursorProxy.prototype.set = function(target, name, val, receiver) {
      if (name === 'line' || name === '0') {
        this.window.setCursor([val, target[1]]);
      } else if (name === 'row' || name === '1') {
        this.window.setCursor([target[0], val]);
      } else {
        target[name](val);
      }
      return true;
    };

    return CursorProxy;

  })();

  module.exports = {
    VimProxy: VimProxy,
    CursorProxy: CursorProxy,
    VarProxy: VarProxy,
    OptionProxy: OptionProxy
  };

}).call(this);
