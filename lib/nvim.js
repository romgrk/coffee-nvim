// Generated by CoffeeScript 1.10.0
(function() {
  var Clc, Net, Path, attach, await, bufprops, current, def, defer, fiber, key, sync;

  Path = require('path');

  Net = require('net');

  Clc = require('cli-color');

  attach = require('neovim-client');

  sync = require('synchronize');

  fiber = sync.fiber;

  await = sync.await;

  defer = sync.defer;

  current = {
    windows: {
      get: function() {
        return await(Nvim.getWindows(defer()));
      }
    },
    buffers: {
      get: function() {
        return await(Nvim.getBuffers(defer()));
      }
    },
    buffer: {
      get: function() {
        return await(Nvim.getCurrentBuffer(defer()));
      },
      set: function(b) {
        return Nvim.setCurrentBuffer(b);
      }
    },
    window: {
      get: function() {
        return await(Nvim.getCurrentWindow(defer()));
      },
      set: function(b) {
        return Nvim.setCurrentWindow(b);
      }
    },
    tab: {
      get: function() {
        return await(Nvim.getCurrentTabpage(defer()));
      },
      set: function(b) {
        return Nvim.setCurrentTabpage(b);
      }
    }
  };

  for (key in current) {
    def = current[key];
    Object.defineProperty(global, key, def);
    console.log('global.' + key, def);
  }

  global["eval"] = function(text) {
    return await(Nvim["eval"](text, defer()));
  };

  global.set = function(option, value) {
    if (option == null) {
      return;
    }
    if (option.slice(-1) === '?') {
      return await(Nvim.getOption(option.slice(0, -1), defer()));
    }
    if (value != null) {
      return Nvim.setOption(option, value);
    }
  };

  global.normal = function(seq, nore) {
    if (nore == null) {
      nore = true;
    }
    return Nvim.command("normal" + (typeof nore === "function" ? nore({
      '!': ''
    }) : void 0) + " " + seq);
  };

  global.execute = function(seq) {
    return Nvim.command(seq);
  };

  global.insert = function(lnum, lines) {
    var buf;
    buf = await(Nvim.getCurrentBuffer(defer()));
    return buf.insert(lnum, lines);
  };

  bufprops = {
    length: {
      get: function() {
        return await(this.lineCount(defer()));
      }
    },
    number: {
      get: function() {
        return await(this.getNumber(defer()));
      }
    },
    name: {
      get: function() {
        return await(this.getName(defer()));
      },
      set: function(v) {
        return this.setName(v);
      }
    }
  };

  global.defineObjects = function() {
    var Buffer, k, results;
    Buffer = Object.getPrototypeOf(buffer);
    results = [];
    for (k in bufprops) {
      def = bufprops[k];
      results.push(Object.defineProperty(Buffer, k, def));
    }
    return results;
  };

}).call(this);
