// Generated by CoffeeScript 1.10.0
(function() {
  var CoffeeScript, Fs, Module, Path, Plugin, Vm, assert,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Fs = require('fs');

  Vm = require('vm');

  Path = require('path');

  Module = require('module');

  CoffeeScript = require('coffee-script');

  assert = require('assert');

  Plugin = (function(superClass) {
    extend(Plugin, superClass);

    Plugin._types = ['command', 'function', 'autocmd'];

    Plugin._context = {};

    Plugin._cache = {};

    Plugin._resolveFilename = function(f, p) {
      if (typeof f !== 'string') {
        f = f.toString();
      }
      return Plugin.__super__.constructor._resolveFilename.call(this, f, p);
    };

    Plugin._load = function(filename, context) {
      var e, error, p;
      try {
        filename = this._resolveFilename(filename, process.mainModule);
      } catch (error) {
        e = error;
        log.error(e.stack);
        return void 0;
      }
      if (Plugin._cache[filename] != null) {
        return Plugin._cache[filename];
      }
      p = new Plugin(filename);
      p.load(context != null ? context : null);
      return p;
    };


    /* INSTANCE */

    Plugin.prototype.filename = null;

    Plugin.prototype.specs = [];

    Plugin.prototype.handlers = {};

    function Plugin(filename) {
      this.filename = this.constructor._resolveFilename(filename, this);
      this.dirname = Path.dirname(this.filename);
    }

    Plugin.prototype.load = function(context) {
      var code, compiled, exports, extension, ref, require, sandbox;
      if (Plugin._cache[this.filename] != null) {
        return Plugin._cache[this.filename];
      }
      this.paths = Module._nodeModulePaths(this.filename);
      extension = Path.extname(this.filename);
      require = (function(_this) {
        return function(path) {
          return _this.require(path);
        };
      })(this);
      require.resolve = (function(_this) {
        return function(req) {
          return Module._resolveFilename(req, _this);
        };
      })(this);
      if (context == null) {
        context = (ref = Plugin._context) != null ? ref : {};
      }
      context.__filename = this.filename;
      context.__dirname = this.dirname;
      context.module = this;
      context.require = require.bind(this);
      context.define = this.define.bind(this);
      sandbox = Vm.createContext(context);
      if (extension === '.coffee') {
        code = CoffeeScript._compileFile(this.filename);
      } else {
        code = Fs.readFileSync(this.filename);
      }
      code = Module.wrap(code);
      compiled = Vm.runInContext(code, sandbox);
      exports = compiled.apply(this.exports, [this.exports, require, this, this.filename, this.dirname]);
      this.loaded = true;
      Plugin._cache[this.filename] = this;
      return exports;
    };

    Plugin.prototype.define = function(type, name, cb, sync, opts) {
      var ref, spec;
      if (sync == null) {
        sync = false;
      }
      if (opts == null) {
        opts = {};
      }
      if (typeof sync === 'object') {
        opts = sync;
        sync = (ref = opts.sync) != null ? ref : false;
      }
      assert((type != null) && (name != null) && (cb != null));
      assert(typeof type === 'string');
      assert(Plugin._types.indexOf(type) !== -1);
      assert(typeof name === 'string');
      assert(typeof cb === 'function');
      spec = {
        type: type,
        name: name,
        sync: sync,
        opts: opts
      };
      if (type === 'autocmd') {
        assert(opts.pattern != null);
        spec.name += ":" + opts.pattern;
      }
      this.handlers[type + ":" + spec.name] = cb;
      return this.specs.push(spec);
    };

    return Plugin;

  })(Module);

  module.exports = Plugin;

}).call(this);
